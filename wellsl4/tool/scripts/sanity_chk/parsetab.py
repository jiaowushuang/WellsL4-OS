
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTnonassocEQUALSNOTEQUALSGTLTGTEQLTEQINAND CBRACKET COLON COMMA CPAREN EQUALS GT GTEQ HEX IN INTEGER LT LTEQ NOT NOTEQUALS OBRACKET OPAREN OR STR SYMBOLexpr : expr OR exprexpr : expr AND exprexpr : NOT exprexpr : OPAREN expr CPARENexpr : SYMBOL EQUALS const\n            | SYMBOL NOTEQUALS const\n            | SYMBOL GT number\n            | SYMBOL LT number\n            | SYMBOL GTEQ number\n            | SYMBOL LTEQ number\n            | SYMBOL IN list\n            | SYMBOL COLON STRexpr : SYMBOLexpr : SYMBOL OPAREN arg_intr CPARENarg_intr : constarg_intr : arg_intr COMMA constlist : OBRACKET list_intr CBRACKETlist_intr : constlist_intr : list_intr COMMA constconst : STR\n             | numbernumber : INTEGER\n              | HEX'
    
_lr_action_items = {'NOT':([0,2,3,5,6,],[2,2,2,2,2,]),'OPAREN':([0,2,3,4,5,6,],[3,3,3,17,3,3,]),'SYMBOL':([0,2,3,5,6,],[4,4,4,4,4,]),'$end':([1,4,7,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,38,40,],[0,-13,-3,-1,-2,-4,-5,-20,-21,-22,-23,-6,-7,-8,-9,-10,-11,-12,-14,-17,]),'OR':([1,4,7,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,38,40,],[5,-13,-3,5,-1,-2,-4,-5,-20,-21,-22,-23,-6,-7,-8,-9,-10,-11,-12,-14,-17,]),'AND':([1,4,7,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,38,40,],[6,-13,-3,6,6,-2,-4,-5,-20,-21,-22,-23,-6,-7,-8,-9,-10,-11,-12,-14,-17,]),'EQUALS':([4,],[9,]),'NOTEQUALS':([4,],[10,]),'GT':([4,],[11,]),'LT':([4,],[12,]),'GTEQ':([4,],[13,]),'LTEQ':([4,],[14,]),'IN':([4,],[15,]),'COLON':([4,],[16,]),'CPAREN':([4,7,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,38,40,42,],[-13,-3,20,-1,-2,-4,-5,-20,-21,-22,-23,-6,-7,-8,-9,-10,-11,-12,38,-15,-14,-17,-16,]),'STR':([9,10,16,17,32,39,41,],[22,22,33,22,22,22,22,]),'INTEGER':([9,10,11,12,13,14,17,32,39,41,],[24,24,24,24,24,24,24,24,24,24,]),'HEX':([9,10,11,12,13,14,17,32,39,41,],[25,25,25,25,25,25,25,25,25,25,]),'OBRACKET':([15,],[32,]),'COMMA':([22,23,24,25,34,35,36,37,42,43,],[-20,-21,-22,-23,39,-15,41,-18,-16,-19,]),'CBRACKET':([22,23,24,25,36,37,43,],[-20,-21,-22,-23,40,-18,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,2,3,5,6,],[1,7,8,18,19,]),'const':([9,10,17,32,39,41,],[21,26,35,37,42,43,]),'number':([9,10,11,12,13,14,17,32,39,41,],[23,23,27,28,29,30,23,23,23,23,]),'list':([15,],[31,]),'arg_intr':([17,],[34,]),'list_intr':([32,],[36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> expr OR expr','expr',3,'p_expr_or','expr_parser.py',107),
  ('expr -> expr AND expr','expr',3,'p_expr_and','expr_parser.py',111),
  ('expr -> NOT expr','expr',2,'p_expr_not','expr_parser.py',115),
  ('expr -> OPAREN expr CPAREN','expr',3,'p_expr_parens','expr_parser.py',119),
  ('expr -> SYMBOL EQUALS const','expr',3,'p_expr_eval','expr_parser.py',123),
  ('expr -> SYMBOL NOTEQUALS const','expr',3,'p_expr_eval','expr_parser.py',124),
  ('expr -> SYMBOL GT number','expr',3,'p_expr_eval','expr_parser.py',125),
  ('expr -> SYMBOL LT number','expr',3,'p_expr_eval','expr_parser.py',126),
  ('expr -> SYMBOL GTEQ number','expr',3,'p_expr_eval','expr_parser.py',127),
  ('expr -> SYMBOL LTEQ number','expr',3,'p_expr_eval','expr_parser.py',128),
  ('expr -> SYMBOL IN list','expr',3,'p_expr_eval','expr_parser.py',129),
  ('expr -> SYMBOL COLON STR','expr',3,'p_expr_eval','expr_parser.py',130),
  ('expr -> SYMBOL','expr',1,'p_expr_single','expr_parser.py',134),
  ('expr -> SYMBOL OPAREN arg_intr CPAREN','expr',4,'p_func','expr_parser.py',138),
  ('arg_intr -> const','arg_intr',1,'p_arg_intr_single','expr_parser.py',143),
  ('arg_intr -> arg_intr COMMA const','arg_intr',3,'p_arg_intr_mult','expr_parser.py',147),
  ('list -> OBRACKET list_intr CBRACKET','list',3,'p_list','expr_parser.py',152),
  ('list_intr -> const','list_intr',1,'p_list_intr_single','expr_parser.py',156),
  ('list_intr -> list_intr COMMA const','list_intr',3,'p_list_intr_mult','expr_parser.py',160),
  ('const -> STR','const',1,'p_const','expr_parser.py',165),
  ('const -> number','const',1,'p_const','expr_parser.py',166),
  ('number -> INTEGER','number',1,'p_number','expr_parser.py',170),
  ('number -> HEX','number',1,'p_number','expr_parser.py',171),
]
